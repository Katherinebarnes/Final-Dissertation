import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.metrics import confusion_matrix, classification_report, precision_score, recall_score, f1_score
import seaborn as sns
import joblib

# Load dataset
data_path = '/home/pi/Desktop/AI Detection Training model/feeds/data.csv'  # adjust filename
df = pd.read_csv(data_path)

# Features and true labels
X = df[['latitude', 'longitude']]
y_true = df['anomaly status']

# Train Isolation Forest (unsupervised)
# contamination= proportion of outliers expected in the data
contamination_rate = y_true.mean()  # use actual anomaly ratio as contamination
model = IsolationForest(n_estimators=100, contamination=contamination_rate, random_state=42)
model.fit(X)

# Predict: -1 = anomaly, 1 = normal in Isolation Forest
y_pred_if = model.predict(X)
# Convert to 0 = normal, 1 = anomaly for easier comparison
y_pred = np.where(y_pred_if == -1, 1, 0)

# Confusion matrix and classification report
cm = confusion_matrix(y_true, y_pred)
report = classification_report(y_true, y_pred, digits=4)

print("Confusion Matrix:")
print(cm)
print("\nClassification Report:")
print(report)

# Calculate additional metrics
precision = precision_score(y_true, y_pred)
recall = recall_score(y_true, y_pred)
f1 = f1_score(y_true, y_pred)

print(f"Precision: {precision:.4f}")
print(f"Recall:    {recall:.4f}")
print(f"F1 Score:  {f1:.4f}")

# Plot confusion matrix using seaborn heatmap
plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Normal (0)', 'Anomaly (1)'], yticklabels=['Normal (0)', 'Anomaly (1)'])
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

# Visualization of anomalies on scatter plot (latitude vs longitude)
plt.figure(figsize=(10, 7))
# Normal points
plt.scatter(X[y_pred == 0]['longitude'], X[y_pred == 0]['latitude'], c='green', label='Predicted Normal', alpha=0.5)
# Anomaly points
plt.scatter(X[y_pred == 1]['longitude'], X[y_pred == 1]['latitude'], c='red', label='Predicted Anomaly', alpha=0.7)
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.title('Isolation Forest Anomaly Detection on GPS Data')
plt.legend()
plt.grid(True)
plt.show()

# Save the trained model for later use
model_path = '/home/pi/Desktop/AI Detection Training model/feeds/isolation_forest_model.joblib'
joblib.dump(model, model_path)
print(f"Model saved to {model_path}")

# Function to predict anomaly on new GPS coordinate
def predict_anomaly(latitude, longitude):
    point = [[latitude, longitude]]
    pred = model.predict(point)
    return 1 if pred == -1 else 0

# Example prediction
test_lat, test_long = 13.1687, 77.5352
print(f"Predicted anomaly status for ({test_lat}, {test_long}): {predict_anomaly(test_lat, test_long)}")